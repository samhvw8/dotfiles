# =============================================================================
# ZSH Configuration - Optimized & Readable
# =============================================================================

# Basic ZSH Options
setopt SHARE_HISTORY INC_APPEND_HISTORY HIST_NO_STORE
setopt appendhistory beep nomatch promptsubst

# XDG Base Directories
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"
export XDG_RUNTIME_DIR="${HOME}/.local/run"

# ZSH-specific directories
export ZSH_DATA_DIR="${XDG_DATA_HOME}/zsh"
export ZSH_CACHE_DIR="${XDG_CACHE_HOME}/zsh"
export ZSH_COMPDUMP="${ZSH_CACHE_DIR}/zcompdump"

# Create necessary directories
for dir in "$XDG_CONFIG_HOME" "$XDG_CACHE_HOME" "$XDG_DATA_HOME" "$XDG_STATE_HOME" "$XDG_RUNTIME_DIR" \
           "$ZSH_DATA_DIR" "$ZSH_CACHE_DIR" "$ZSH_CACHE_DIR/completions"; do
    [[ ! -d "$dir" ]] && mkdir -p "$dir"
done

# =============================================================================
# ZI Plugin Manager
# =============================================================================

# Install ZI if not present
if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
    print -P "%F{33}Installing ZI...%f"
    command mkdir -p "$HOME/.zi" && command chmod go-rwX "$HOME/.zi"
    command git clone -q --depth=1 https://github.com/z-shell/zi "$HOME/.zi/bin" || return 1
fi

# Source ZI
source "$HOME/.zi/bin/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi

# Load annexes
zi light-mode for z-shell/z-a-meta-plugins @annexes
zicompinit

# =============================================================================
# Helper Functions
# =============================================================================

command_exists() { 
    command -v "$1" >/dev/null 2>&1
}

add_to_path() { 
    [[ -d "$1" ]] && export PATH="$1:$PATH"
}

fbd() {
    git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)" | \
    fzf --multi | xargs -r git branch -D
}

# =============================================================================
# Prompt - Starship
# =============================================================================

# Platform-specific binary selection
case $(uname) in
    Darwin) 
        STARSHIP_BINARY='*apple-darwin.tar.gz' ;;
    *)
        case $(uname -m) in
            aarch64) STARSHIP_BINARY='*aarch64-unknown-linux*' ;;
            *) STARSHIP_BINARY='*unknown-linux-gnu*' ;;
        esac ;;
esac

zi lucid for \
    as"command" from"gh-r" \
    atload'eval "$(starship init zsh)"' \
    bpick"$STARSHIP_BINARY" \
    starship/starship

# =============================================================================
# Tool Completions
# =============================================================================

# Generate completions for common tools
for tool in mise kubectl helm; do
    if command_exists $tool; then
        comp_file="$ZSH_CACHE_DIR/completions/_$tool"
        [[ ! -f "$comp_file" ]] && $tool completion zsh > "$comp_file" 2>/dev/null
        if [[ -f "$comp_file" ]]; then
            zi ice as"completion"
            zi snippet "$comp_file"
        fi
    fi
done

# =============================================================================
# Oh-My-Zsh Integration
# =============================================================================

# Load essential OMZ library
zi lucid for OMZL::history.zsh

# Load OMZ libraries and plugins with delay
zi wait lucid for \
    OMZL::clipboard.zsh \
    OMZL::compfix.zsh \
    OMZL::completion.zsh \
    OMZL::correction.zsh \
    OMZL::directories.zsh \
    OMZL::git.zsh \
    OMZL::grep.zsh \
    OMZL::spectrum.zsh \
    OMZP::git \
    OMZP::urltools \
    OMZP::extract \
    OMZP::encode64

# =============================================================================
# Aliases
# =============================================================================

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# File operations
alias ls='ls -G'
alias ll='ls -lh'

# Kubernetes shortcuts
if command_exists kubectl; then
    alias k=kubectl
    alias kaf='kubectl apply -f'
fi

# Editor shortcuts
if command_exists nvim; then
    alias vim=nvim
    alias vimo=/usr/bin/vim
    alias nvimo="nvim -u NORC --noplugin"
    export EDITOR=nvim
fi

# =============================================================================
# Additional Tools
# =============================================================================

# FZF integration
if [[ -f "$HOME/.fzf.zsh" ]]; then
    zi ice wait"0" lucid
    zi snippet "$HOME/.fzf.zsh"
    zi light Aloxaf/fzf-tab
    zi light wfxr/forgit
fi

# Docker completions (full installation only)
if command_exists docker; then
    zi ice as"completion"
    zi snippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker
    zi snippet https://github.com/docker/compose/blob/v1/contrib/completion/zsh/_docker-compose
fi

# Zoxide (better cd)
zi ice wait"2" as"command" from"gh-r" lucid \
    mv"*zoxide* -> zoxide" \
    atclone"./zoxide init --cmd j zsh > init.zsh" \
    atpull"%atclone" src"init.zsh" nocompile'!'
zi light ajeetdsouza/zoxide

# Console tools collection (full installation only)
zi light-mode for z-shell/z-a-meta-plugins @console-tools

# Delta (better diff)
zi ice as"command" from"gh-r" mv"delta* -> delta" pick"delta/delta"
zi light dandavison/delta

# Additional completions
zi ice lucid wait as'completion' blockf
zi snippet https://github.com/rust-lang/cargo/blob/master/src/etc/_cargo

zi ice lucid wait as'completion' blockf mv'youtube-dl.zsh -> _youtube-dl'
zi snippet https://github.com/ytdl-org/youtube-dl/blob/master/youtube-dl.plugin.zsh

# =============================================================================
# ZSH Enhancements
# =============================================================================

# Syntax highlighting, completions, and autosuggestions
zi wait lucid for \
    atinit"ZI[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
        z-shell/fast-syntax-highlighting \
    blockf \
        zsh-users/zsh-completions \
    atload"!_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions

# Optional tools
# Note: Now using chezmoi for dotfile management instead of dotbare

zi ice wait lucid
zi light "MichaelAquilina/zsh-you-should-use"

# =============================================================================
# PATH Configuration
# =============================================================================

add_to_path "$HOME/.local/bin"
add_to_path "$HOME/bin"
add_to_path "${KREW_ROOT:-$HOME/.krew}/bin"

# =============================================================================
# OS-specific Configuration
# =============================================================================

if [[ $(uname) == "Darwin" ]]; then
    # macOS specific
    [[ -e "${HOME}/.iterm2_shell_integration.zsh" ]] && source "${HOME}/.iterm2_shell_integration.zsh"
    export HOMEBREW_NO_INSTALL_CLEANUP=1
    add_to_path "/usr/local/sbin"
    add_to_path "/usr/local/opt/icu4c/bin"
    add_to_path "/usr/local/opt/icu4c/sbin"
else
    # Linux specific
    alias open=xdg-open
    [[ -f "$HOME/idea/idea-IC-203.8084.24/bin/idea.sh" ]] && \
        alias idea="$HOME/idea/idea-IC-203.8084.24/bin/idea.sh"
fi

# =============================================================================
# Environment Variables
# =============================================================================

export DIRENV_LOG_FORMAT=
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export BAT_THEME="Dracula"

# FZF configuration
export FZF_DEFAULT_OPTS='
--color=dark
--color=fg:-1,bg:-1,hl:#5fff87,fg+:-1,bg+:-1,hl+:#ffaf5f
--color=info:#af87ff,prompt:#5fff87,pointer:#ff87d7,marker:#ff87d7,spinner:#ff87d7
'
export FZF_DEFAULT_COMMAND='fd --type file'

# =============================================================================
# Conda Configuration
# =============================================================================

{{- if not .minimal }}
# Determine Conda base directory (full installation only)
if command_exists conda; then
    export _CONDA_BASE=$(dirname $(dirname $(which conda)))
elif [[ $(uname) == "Darwin" ]]; then
    export _CONDA_BASE=/opt/homebrew/Caskroom/miniconda/base
else
    export _CONDA_BASE=$HOME/miniconda3
fi

# Initialize Conda if available
if [[ -f "$_CONDA_BASE/bin/conda" ]]; then
    __conda_setup="$('$_CONDA_BASE/bin/conda' 'shell.zsh' 'hook' 2>/dev/null)"
    if [[ $? -eq 0 ]]; then
        eval "$__conda_setup"
    elif [[ -f "$_CONDA_BASE/etc/profile.d/conda.sh" ]]; then
        . "$_CONDA_BASE/etc/profile.d/conda.sh"
    else
        export PATH="$_CONDA_BASE/bin:$PATH"
    fi
    unset __conda_setup
fi
{{- end }}

# =============================================================================
# Additional Sources
# =============================================================================

[[ -s "$HOME/.config/envman/load.sh" ]] && source "$HOME/.config/envman/load.sh"
[[ -f "$HOME/.kubecm" ]] && source "$HOME/.kubecm"

# =============================================================================
# Key Bindings
# =============================================================================

set -o emacs
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line  # Ctrl-X-E to edit command in editor